# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~
# Play uses HOCON as its configuration file format.  HOCON has a number
# of advantages over other config formats, but there are two things that
# can be used when modifying settings.
#
# You can include other configuration files in this main application.conf file:
#include "extra-config.conf"
#
# You can declare variables and substitute for them:
#mykey = ${some.value}
#
# And if an environment variable exists when there is no other subsitution, then
# HOCON will fall back to substituting environment variable:
# mykey = ${JAVA_HOME}

## Akka
# https://www.playframework.com/documentation/latest/ScalaAkka#Configuration
# https://www.playframework.com/documentation/latest/JavaAkka#Configuration
# ~~~~~
# Play uses Akka internally and exposes Akka Streams and actors in Websockets and
# other streaming HTTP responses.
akka {
  # "akka.log-config-on-start" is extraordinarly useful because it log the complete
  # configuration at INFO level, including defaults and overrides, so it s worth
  # putting at the very top.
  #
  # Put the following in your conf/logback.xml file:
  #
  # <logger name="akka.actor" level="INFO" />
  #
  # And then uncomment this line to debug the configuration.
  #
  #log-config-on-start = true
  actors {
    timeout = 1
    cometActorSleepTime = 500 #milliseconds

    default-dispatcher {
      # This will be used if you have set "executor = "fork-join-executor""
      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 12

        # The parallelism factor is used to determine thread pool size using the
        # following formula: ceil(available processors * factor). Resulting size
        # is then bounded by the parallelism-min and parallelism-max values.
        parallelism-factor = 5.0

        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 64

        # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
        # like peeking mode which "pop".
        task-peeking-mode = "FIFO"
      }
    }

    scheduler-dispatcher {
      executor = "thread-pool-executor"
      throughput = 1
      thread-pool-executor {
        fixed-pool-size = 29
      }
    }
  }

}

## Secret key
# http://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
# The secret key is used to sign Play's session cookie.
# This must be changed for production, but we don't recommend you change it in this file.
play.http.secret.key = ${PLAY_HTTP_SECRET}
## Modules
# https://www.playframework.com/documentation/latest/Modules
# ~~~~~
# Control which modules are loaded when Play starts.  Note that modules are
# the replacement for "GlobalSettings", which are deprecated in 2.5.x.
# Please see https://www.playframework.com/documentation/latest/GlobalSettings
# for more information.
#
# You can also extend Play functionality by using one of the publically available
# Play modules: https://playframework.com/documentation/latest/ModuleDirectory
play.modules {
  # By default, Play will load any class called Module that is defined
  # in the root package (the "app" directory), or you can define them
  # explicitly below.
  # If there are any built-in modules that you want to disable, you can list them here.
  #enabled += my.application.Module
  # If there are any built-in modules that you want to disable, you can list them here.
  #disabled += ""
  enabled += "play.filters.csrf.CSRFModule"
  enabled += "play.filters.cors.CORSModule"
  enabled += "play.filters.csp.CSPModule"
  enabled += "play.filters.headers.SecurityHeadersModule"
  enabled += "play.filters.hosts.AllowedHostsModule"
}

## IDE
# https://www.playframework.com/documentation/latest/IDE
# ~~~~~
# Depending on your IDE, you can add a hyperlink for errors that will jump you
# directly to the code location in the IDE in dev mode. The following line makes
# use of the IntelliJ IDEA REST interface:
#play.editor="http://localhost:63342/api/file/?file=%s&line=%s"

## Internationalisation
# https://www.playframework.com/documentation/latest/JavaI18N
# https://www.playframework.com/documentation/latest/ScalaI18N
# ~~~~~
# Play comes with its own i18n settings, which allow the user's preferred language
# to map through to internal messages, or allow the language to be stored in a cookie.
play.i18n {
  # The application languages
  langs = ["en"]

  # Whether the language cookie should be secure or not
  #langCookieSecure = true

  # Whether the HTTP only attribute of the cookie should be set to true
  #langCookieHttpOnly = true
}

## Filters
# https://www.playframework.com/documentation/latest/ScalaHttpFilters
# https://www.playframework.com/documentation/latest/JavaHttpFilters
# ~~~~~
# Filters run code on every request. They can be used to perform
# common logic for all your actions, e.g. adding common headers.
#


## Play HTTP settings
# ~~~~~
play.http {
  ## Router
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # Define the Router object to use for this application.
  # This router will be looked up first when the application is starting up,
  # so make sure this is the entry point.
  # Furthermore, it's assumed your route file is named properly.
  # So for an application router like `my.application.Router`,
  # you may need to define a router file `conf/my.application.routes`.
  # Default to Routes in the root package (aka "apps" folder) (and conf/routes)
  #router = my.application.Router

  ## Action Creator
  # https://www.playframework.com/documentation/latest/JavaActionCreator
  # ~~~~~
  #actionCreator = null

  ## ErrorHandler
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # If null, will attempt to load a class called ErrorHandler in the root package,
  #errorHandler = null

  ## Session & Flash
  # https://www.playframework.com/documentation/latest/JavaSessionFlash
  # https://www.playframework.com/documentation/latest/ScalaSessionFlash
  # ~~~~~
  session {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true

    # Sets the max-age field of the cookie to 5 minutes.
    # NOTE: this only sets when the browser will discard the cookie. Play will consider any
    # cookie value with a valid signature to be a valid session forever. To implement a server side session timeout,
    # you need to put a timestamp in the session and check it at regular intervals to possibly expire it.
    #maxAge = 300

    # Sets the domain on the session cookie.
    #domain = "example.com"

    token {
      timeout = 300000 #300 seconds
    }
  }

  flash {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true
  }
}

## Netty Provider
# https://www.playframework.com/documentation/latest/SettingsNetty
# ~~~~~
play.server.netty {
  # Whether the Netty wire should be logged
  #log.wire = true

  # If you run Play on Linux, you can use Netty's native socket transport
  # for higher performance with less garbage.
  #transport = "native"
}

## WS (HTTP Client)
# https://www.playframework.com/documentation/latest/ScalaWS#Configuring-WS
# ~~~~~
# The HTTP client primarily used for REST APIs.  The default client can be
# configured directly, but you can also create different client instances
# with customized settings. You must enable this by adding to build.sbt:
#
# libraryDependencies += ws // or javaWs if using java
#
play.ws {
  # Sets HTTP requests not to follow 302 requests
  #followRedirects = false

  # Sets the maximum number of open HTTP connections for the client.
  #ahc.maxConnectionsTotal = 50

  ## WS SSL
  # https://www.playframework.com/documentation/latest/WsSSL
  # ~~~~~
  ssl {
    # Configuring HTTPS with Play WS does not require programming.  You can
    # set up both trustManager and keyManager for mutual authentication, and
    # turn on JSSE debugging in development with a reload.
    #debug.handshake = true
    #trustManager = {
    #  stores = [
    #    { type = "JKS", path = "exampletrust.jks" }
    #  ]
    #}
  }
}

## Cache
# https://www.playframework.com/documentation/latest/JavaCache
# https://www.playframework.com/documentation/latest/ScalaCache
# ~~~~~
# Play comes with an integrated cache API that can reduce the operational
# overhead of repeated requests. You must enable this by adding to build.sbt:
#
# libraryDependencies += cache
#
play.cache {
  # If you want to bind several caches, you can bind the individually
  #bindCaches = ["db-cache", "user-cache", "session-cache"]
}

## Filters
# https://www.playframework.com/documentation/latest/ScalaHttpFilters
# https://www.playframework.com/documentation/latest/JavaHttpFilters
# ~~~~~
# Filters run code on every request. They can be used to perform
# common logic for all your actions, e.g. adding common headers.
#
## Filter Configuration
# https://www.playframework.com/documentation/latest/Filters
# ~~~~~
# There are a number of built-in filters that can be enabled and configured
# to give Play greater security.

play.filter {
  enabled += play.filters.csrf.CSRFFilter
  enabled += play.filters.headers.SecurityHeadersFilter
  enabled += play.filters.hosts.AllowedHostsFilter
}
play.filters.enabled += play.filters.cors.CORSFilter
play.filters.enabled += play.filters.csp.CSPFilter

#
play.filters {

  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  # CORS is a protocol that allows web applications to make requests from the browser
  # across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {

  }

  ## CSRF Filter
  # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
  # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
  # ~~~~~
  # Play supports multiple methods for verifying that a request is not a CSRF request.
  # The primary mechanism is a CSRF token. This token gets placed either in the query string
  # or body of every form submitted, and also gets placed in the users session.
  # Play then verifies that both tokens are present and match.
  csrf {
    # Sets the cookie to be sent only over HTTPS
    #cookie.secure = true

    # Defaults to CSRFErrorHandler in the root package.
    #errorHandler = MyCSRFErrorHandler
  }

  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    # The X-Frame-Options header. If null, the header is not set.
    #frameOptions = "DENY"
    frameOptions = "sameorigin"
    # The X-XSS-Protection header. If null, the header is not set.
    xssProtection = "1; mode=block"

    # The X-Content-Type-Options header. If null, the header is not set.
    contentTypeOptions = "nosniff"

    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
    #permittedCrossDomainPolicies = "master-only"

    referrerPolicy = null

    # The Content-Security-Policy header. If null, the header is not set.
    contentSecurityPolicy = "default-src 'self' ws://192.168.0.147:46657/ resource://devtools/ https://fcm.googleapis.com/fcm/connect/subscribe 'unsafe-inline' data:"
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  # Play provides a filter that lets you configure which hosts can access your application.
  # This is useful to prevent cache poisoning attacks.
  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    #allowed = [".example.com", "localhost:9000"]
    allowed = ["."]
  }
}

play.http.errorHandler = "controllers.responses.HttpErrorHandler"

play.i18n.langs = ["en"]

## Database Connection Pool
play.db {
  config = "db"
  default = "default"

  prototype.hikaricp {
    minimumIdle = 50
    maximumPoolSize = 200
  }
}

## Slick Database Connection
slick.dbs {
  default {
    profile = "slick.jdbc.PostgresProfile$"
    db {
      driver = "org.postgresql.Driver"
      url = "jdbc:postgresql://localhost:5432/"${POSTGRES_DB}
      user = ${POSTGRES_USER}
      password = ${POSTGRES_PASSWORD}
    }
  }
}

## Play Evolutions Settings
play.evolutions {
  db {
    default {
      enabled = true
      schema = "public"
      autocommit = true
      useLocks = true
      autoApply = true
      autoApplyDowns = true
    }
  }
}

blockchain {

  genesis {
    accountName = "main"
  }

  main {
    ip = "http://persistence"
    wsIP = "ws://persistence"
    restPort = ${BLOCKCHAIN_REST_PORT}
    abciPort = ${BLOCKCHAIN_ABCI_PORT}
    chainID = "crust-2"
  }

  transaction {
    mode = "async" #async/sync/block
    hashLength = 64
  }

  kafka {
    enabled = false
    transactionIterator {
      initialDelay = 0 #seconds
      interval = 20 #seconds
    }
  }
  entityIterator {
    threadSleep = 8000 #milliseconds
  }

  denom {
    gas = ucommit
    steak = steak
  }

  defaultFaucetToken = 5

  response {
    error {
      transactionHashNotFound = """Tx. response error. RPC error .32603 . Internal error. Tx .\w+. not found"""
    }
  }
}

notification {
  notificationsPerPage: 10
}

pushNotification {
  url = "https://fcm.googleapis.com/fcm/send",
  authorizationKey = "key=AAAAwSmfGOo:APA91bGSaXARMCGOFGuEB-wJM2tyLQU3HhTRxb1SZiWefjDq3gGiXuVogs9n7jA-MafSK5cJQ4YS8b_9LvlxQUqzTa5jGDHXVd6l9zp8xeXT30gUUDOGmR5Z_-QnFUNQC1xifiyzUKqd",
  senderID = "829626980586",
  apiKey: "AIzaSyA1N73fWM03Vb1CnEUF1YTbZUj16IxMvdg",
  authDomain: "corp-play-scala.firebaseapp.com",
  databaseURL: "https://corp-play-scala.firebaseio.com",
  projectId: "corp-play-scala",
  storageBucket: "corp-play-scala.appspot.com"
}

play.mailer {
  host = "smtp.gmail.com"
  port = 587
  ssl = no
  tls = true
  tlsRequired = no
  user = "testplayscala@gmail.com"
  password = "matsiyahu123456"
  bounceAddress = "testplayscala@gmail.com"
  replyTo = "testplayscala@gmail.com"
  debug = no
  timeout = null
  connectiontimeout = null
  mock = no
  charset = "UTF-8"
  props {
  }
}

twilio {
  accountSID = "ACfcbe0c124aed91bf6b871a42898c7ebd"
  authToken = "dec42ae7b234a67d8a1bab1bdfc47e8c"
  fromNumber = "+16085888053"
}

upload {
   account {
     bankAccountDetailPath = "/persistence_data/commitFiles/account/KYC/bankAccountDetail/"
     identificationPath = "/persistence_data/commitFiles/account/KYC/identification/"
     profilePicturePath = "/persistence_data/commitFiles/account/profilePicture/"
   }
   zone {
     bankAccountDetailPath = "/persistence_data/commitFiles/zone/KYC/bankAccountDetail/"
     identificationPath = "/persistence_data/commitFiles/zone/KYC/identification/"
   }
   organization {
     bankAccountDetailPath = "/persistence_data/commitFiles/organization/KYC/bankAccountDetail/"
     adminProfileIdentificationPath = "/persistence_data/commitFiles/organization/KYC/adminProfileIdentification/"
     latestAuditedFinancialReportPath = "/persistence_data/commitFiles/organization/KYC/latestAuditedFinancialReport/"
     lastYearAuditedFinancialReportPath = "/persistence_data/commitFiles/organization/KYC/lastYearAuditedFinancialReport/"
     managementPath = "/persistence_data/commitFiles/organization/KYC/management/"
     acraPath = "/persistence_data/commitFiles/organization/KYC/ACRA/"
     shareStructurePath = "/persistence_data/commitFiles/organization/KYC/shareStructure/"
     dentificationPath = "/persistence_data/commitFiles/organization/KYC/identification/"
     agreementPath = "/persistence_data/commitFiles/organization/agreement/"
     incorporationDocument="/persistence_data/commitFiles/organization/KYC/incorporationDocument/"

   }
   trader {
     identificationPath = "/persistence_data/commitFiles/trader/KYC/identification/"
     agreementPath = "/persistence_data/commitFiles/trader/agreement/"
     employmentProofPath= "/persistence_data/commitFiles/trader/employmentProof/"
   }
     asset {
       contract = "/persistence_data/commitFiles/asset/contract/"
       obl = "/persistence_data/commitFiles/asset/obl/"
       invoice = "/persistence_data/commitFiles/asset/invoice/"
       packingList = "/persistence_data/commitFiles/asset/packingList/"
       coo = "/persistence_data/commitFiles/asset/coo/"
       coa = "/persistence_data/commitFiles/asset/coa/"
       other = "/persistence_data/commitFiles/asset/other/"
     }
     negotiation {
       buyerContract = "/persistence_data/commitFiles/negotiation/buyerContract/"
       sellerContract = "/persistence_data/commitFiles/negotiation/sellerContract/"
       awbProof = "/persistence_data/commitFiles/negotiation/awbProof/"
       fiatProof = "/persistence_data/commitFiles/negotiation/fiatProof/"

     }
}

# Integrations Demo
westernUnion {
  #Redirect url for payments
  url = "https://business.globalpay.wu.com/geo-buyer/sso/plain/"
  clientID = "1000335101"
  serviceID = "100000181375"
  rtcbSecretKey = "D3M0r1c8KeyCoMd3X"

  sftpSite = "192.168.0.147"
  sftpPort = 22
  sftpUsername = "sftpuser"
  sftpPassword = "sftpuser"
  sshPrivateKeyPath = "/root/.ssh/id_rsa"
  sftpFileBasePath = "/Outgoing"
  sftpFileStoragePath = "/root/wu2Files/"
  wuPGPPublicKeyPath = "/root/wuFiles/WUBS_PGP_Comdex_Demo_Sign-Public.asc"
  comdexPGPPrivateKeyPath = "/root/wuFiles/DemoComdex.asc"
  comdexPGPPrivateKeyPassword = "comdex123"
  tempFileName = "tmp.csv"

  scheduler {
    initialDelay = 0 #seconds
    intervalTime = 43200 #seconds
  }
}

# trulioo
trulioo {
  url = "https://gateway.trulioo.com/trial"
  apiKeyName = "x-trulioo-api-key"
  apiKeyValue = "3a10476f78d6817f3cf20235c32a8956"

  endpoints {
    authentication = "/connection/v1/testauthentication"
    countryCodes = "/configuration/v1/countrycodes/"
    entities = "/configuration/v1/testentities/"
    fields = "/configuration/v1/fields/"
    recommendedFields = "/configuration/v1/recommendedfields/"
    consents = "/configuration/v1/consents/"
    countrySubDivisions = "/configuration/v1/countrysubdivisions/"
    dataSources = "/configuration/v1/datasources/"
    verify = "/verifications/v1/verify"
    transactionRecord = "/verifications/v1/transactionrecord/"
  }

}