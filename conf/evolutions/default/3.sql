DROP SCHEMA IF EXISTS DOCUSIGN CASCADE;
DROP SCHEMA IF EXISTS MEMBER_CHECK CASCADE;

CREATE OR REPLACE FUNCTION PUBLIC.INSERT_OR_UPDATE_EPOCH_LOG() RETURNS TRIGGER AS
$$
BEGIN
    IF (TG_OP = 'INSERT') THEN
        new."createdOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000);;
        new."createdBy" = CURRENT_USER;;
    ELSEIF (TG_OP = 'UPDATE') THEN
--         values of created needs to be set here otherwise insertOrUpdate of slick will omit created details
        new."createdOnMillisEpoch" = old."createdOnMillisEpoch";;
        new."createdBy" = old."createdBy";;
        new."updatedOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000);;
        new."updatedBy" = CURRENT_USER;;
    END IF;;
    RETURN NEW;;
END;;
$$ LANGUAGE PLPGSQL;

ALTER TABLE BLOCKCHAIN."Account_BC"
    ADD COLUMN IF NOT EXISTS "createdOnMillisEpoch" BIGINT DEFAULT null;
ALTER TABLE BLOCKCHAIN."Account_BC"
    ADD COLUMN IF NOT EXISTS "updatedOnMillisEpoch" BIGINT DEFAULT null;
DROP TRIGGER IF EXISTS ACCOUNT_BC_LOG ON BLOCKCHAIN."Account_BC";
UPDATE BLOCKCHAIN."Account_BC"
SET "createdOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "createdOn" AT TIME ZONE "createdOnTimeZone") * 1000)
WHERE "createdOn" IS NOT NULL;
UPDATE BLOCKCHAIN."Account_BC"
SET "updatedOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "updatedOn" AT TIME ZONE "updatedOnTimeZone") * 1000)
WHERE "updatedOn" IS NOT NULL;
ALTER TABLE BLOCKCHAIN."Account_BC"
    DROP COLUMN IF EXISTS "createdOn";
ALTER TABLE BLOCKCHAIN."Account_BC"
    DROP COLUMN IF EXISTS "createdOnTimeZone";
ALTER TABLE BLOCKCHAIN."Account_BC"
    DROP COLUMN IF EXISTS "updatedOn";
ALTER TABLE BLOCKCHAIN."Account_BC"
    DROP COLUMN IF EXISTS "updatedOnTimeZone";
CREATE TRIGGER ACCOUNT_BC_EPOCH_LOG
    BEFORE INSERT OR UPDATE
    ON BLOCKCHAIN."Account_BC"
    FOR EACH ROW
EXECUTE PROCEDURE PUBLIC.INSERT_OR_UPDATE_EPOCH_LOG();

ALTER TABLE BLOCKCHAIN."Balance_BC"
    ADD COLUMN IF NOT EXISTS "createdOnMillisEpoch" BIGINT DEFAULT null;
ALTER TABLE BLOCKCHAIN."Balance_BC"
    ADD COLUMN IF NOT EXISTS "updatedOnMillisEpoch" BIGINT DEFAULT null;
DROP TRIGGER IF EXISTS BALANCE_BC_LOG ON BLOCKCHAIN."Balance_BC";
UPDATE BLOCKCHAIN."Balance_BC"
SET "createdOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "createdOn" AT TIME ZONE "createdOnTimeZone") * 1000)
WHERE "createdOn" IS NOT NULL;
UPDATE BLOCKCHAIN."Balance_BC"
SET "updatedOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "updatedOn" AT TIME ZONE "updatedOnTimeZone") * 1000)
WHERE "updatedOn" IS NOT NULL;
ALTER TABLE BLOCKCHAIN."Balance_BC"
    DROP COLUMN IF EXISTS "createdOn";
ALTER TABLE BLOCKCHAIN."Balance_BC"
    DROP COLUMN IF EXISTS "createdOnTimeZone";
ALTER TABLE BLOCKCHAIN."Balance_BC"
    DROP COLUMN IF EXISTS "updatedOn";
ALTER TABLE BLOCKCHAIN."Balance_BC"
    DROP COLUMN IF EXISTS "updatedOnTimeZone";
CREATE TRIGGER BALANCE_BC_EPOCH_LOG
    BEFORE INSERT OR UPDATE
    ON BLOCKCHAIN."Balance_BC"
    FOR EACH ROW
EXECUTE PROCEDURE PUBLIC.INSERT_OR_UPDATE_EPOCH_LOG();

ALTER TABLE BLOCKCHAIN."Block"
    ADD COLUMN IF NOT EXISTS "createdOnMillisEpoch" BIGINT DEFAULT null;
ALTER TABLE BLOCKCHAIN."Block"
    ADD COLUMN IF NOT EXISTS "updatedOnMillisEpoch" BIGINT DEFAULT null;
DROP TRIGGER IF EXISTS BLOCK_LOG ON BLOCKCHAIN."Block";
UPDATE BLOCKCHAIN."Block"
SET "createdOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "createdOn" AT TIME ZONE "createdOnTimeZone") * 1000)
WHERE "createdOn" IS NOT NULL;
UPDATE BLOCKCHAIN."Block"
SET "updatedOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "updatedOn" AT TIME ZONE "updatedOnTimeZone") * 1000)
WHERE "updatedOn" IS NOT NULL;
ALTER TABLE BLOCKCHAIN."Block"
    DROP COLUMN IF EXISTS "createdOn";
ALTER TABLE BLOCKCHAIN."Block"
    DROP COLUMN IF EXISTS "createdOnTimeZone";
ALTER TABLE BLOCKCHAIN."Block"
    DROP COLUMN IF EXISTS "updatedOn";
ALTER TABLE BLOCKCHAIN."Block"
    DROP COLUMN IF EXISTS "updatedOnTimeZone";
CREATE TRIGGER BLOCK_EPOCH_LOG
    BEFORE INSERT OR UPDATE
    ON BLOCKCHAIN."Block"
    FOR EACH ROW
EXECUTE PROCEDURE PUBLIC.INSERT_OR_UPDATE_EPOCH_LOG();

ALTER TABLE BLOCKCHAIN."Transaction"
    ADD COLUMN IF NOT EXISTS "createdOnMillisEpoch" BIGINT DEFAULT null;
ALTER TABLE BLOCKCHAIN."Transaction"
    ADD COLUMN IF NOT EXISTS "updatedOnMillisEpoch" BIGINT DEFAULT null;
DROP TRIGGER IF EXISTS TRANSACTION_LOG ON BLOCKCHAIN."Transaction";
UPDATE BLOCKCHAIN."Transaction"
SET "createdOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "createdOn" AT TIME ZONE "createdOnTimeZone") * 1000)
WHERE "createdOn" IS NOT NULL;
UPDATE BLOCKCHAIN."Transaction"
SET "updatedOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "updatedOn" AT TIME ZONE "updatedOnTimeZone") * 1000)
WHERE "updatedOn" IS NOT NULL;
ALTER TABLE BLOCKCHAIN."Transaction"
    DROP COLUMN IF EXISTS "createdOn";
ALTER TABLE BLOCKCHAIN."Transaction"
    DROP COLUMN IF EXISTS "createdOnTimeZone";
ALTER TABLE BLOCKCHAIN."Transaction"
    DROP COLUMN IF EXISTS "updatedOn";
ALTER TABLE BLOCKCHAIN."Transaction"
    DROP COLUMN IF EXISTS "updatedOnTimeZone";
CREATE TRIGGER TRANSACTION_EPOCH_LOG
    BEFORE INSERT OR UPDATE
    ON BLOCKCHAIN."Transaction"
    FOR EACH ROW
EXECUTE PROCEDURE PUBLIC.INSERT_OR_UPDATE_EPOCH_LOG();