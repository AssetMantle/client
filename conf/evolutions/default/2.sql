# --- !Ups

CREATE SCHEMA IF NOT EXISTS ANALYTICS
    AUTHORIZATION "assetMantle";

CREATE TABLE IF NOT EXISTS ANALYTICS."TransactionCounter"
(
    "epoch"             BIGINT  NOT NULL,
    "totalTxs"          INTEGER NOT NULL,
    "createdBy"         VARCHAR,
    "createdOn"         TIMESTAMP,
    "createdOnTimeZone" VARCHAR,
    "updatedBy"         VARCHAR,
    "updatedOn"         TIMESTAMP,
    "updatedOnTimeZone" VARCHAR,
    PRIMARY KEY ("epoch")
);

CREATE TABLE IF NOT EXISTS ANALYTICS."MessageCounter"
(
    "messageType"       VARCHAR NOT NULL,
    "counter"           INTEGER NOT NULL,
    "createdBy"         VARCHAR,
    "createdOn"         TIMESTAMP,
    "createdOnTimeZone" VARCHAR,
    "updatedBy"         VARCHAR,
    "updatedOn"         TIMESTAMP,
    "updatedOnTimeZone" VARCHAR,
    PRIMARY KEY ("messageType")
);

CREATE TABLE IF NOT EXISTS BLOCKCHAIN."Authorization_BC"
(
    "granter"              VARCHAR NOT NULL,
    "grantee"              VARCHAR NOT NULL,
    "msgTypeURL"           VARCHAR NOT NULL,
    "grantedAuthorization" VARCHAR NOT NULL,
    "expiration"           VARCHAR NOT NULL,
    "createdBy"            VARCHAR,
    "createdOn"            TIMESTAMP,
    "createdOnTimeZone"    VARCHAR,
    "updatedBy"            VARCHAR,
    "updatedOn"            TIMESTAMP,
    "updatedOnTimeZone"    VARCHAR,
    PRIMARY KEY ("granter", "grantee", "msgTypeURL")
);

CREATE TABLE IF NOT EXISTS BLOCKCHAIN."FeeGrant_BC"
(
    "granter"           VARCHAR NOT NULL,
    "grantee"           VARCHAR NOT NULL,
    "allowance"         VARCHAR NOT NULL,
    "createdBy"         VARCHAR,
    "createdOn"         TIMESTAMP,
    "createdOnTimeZone" VARCHAR,
    "updatedBy"         VARCHAR,
    "updatedOn"         TIMESTAMP,
    "updatedOnTimeZone" VARCHAR,
    PRIMARY KEY ("granter", "grantee")
);

ALTER TABLE IF EXISTS BLOCKCHAIN."Account_BC"
    ALTER COLUMN "accountType" DROP NOT NULL;
ALTER TABLE IF EXISTS BLOCKCHAIN."IdentityProperties_BC"
    RENAME TO "Identity_BC";
ALTER TABLE IF EXISTS BLOCKCHAIN."IdentityProvisioned_BC"
    RENAME TO "IdentityProvision_BC";
ALTER TABLE IF EXISTS BLOCKCHAIN."IdentityUnprovisioned_BC"
    RENAME TO "IdentityUnprovision_BC";
ALTER TABLE IF EXISTS BLOCKCHAIN."Transaction"
    DROP COLUMN IF EXISTS "status";

ALTER TABLE IF EXISTS BLOCKCHAIN."Asset_BC"
    DROP COLUMN IF EXISTS "id";
ALTER TABLE IF EXISTS BLOCKCHAIN."Asset_BC"
    ADD COLUMN IF NOT EXISTS "classificationID" VARCHAR NOT NULL default '';
ALTER TABLE IF EXISTS BLOCKCHAIN."Asset_BC"
    ADD COLUMN IF NOT EXISTS "hashID" VARCHAR NOT NULL default '';
ALTER TABLE IF EXISTS BLOCKCHAIN."Asset_BC"
    ADD PRIMARY KEY ("classificationID", "hashID");

ALTER TABLE IF EXISTS BLOCKCHAIN."Classification_BC"
    DROP COLUMN IF EXISTS "id";
ALTER TABLE IF EXISTS BLOCKCHAIN."Classification_BC"
    ADD COLUMN IF NOT EXISTS "chainID" VARCHAR NOT NULL default '';
ALTER TABLE IF EXISTS BLOCKCHAIN."Classification_BC"
    ADD COLUMN IF NOT EXISTS "hashID" VARCHAR NOT NULL default '';
ALTER TABLE IF EXISTS BLOCKCHAIN."Classification_BC"
    ADD PRIMARY KEY ("chainID", "hashID");

ALTER TABLE IF EXISTS BLOCKCHAIN."IdentityProvision_BC"
    DROP CONSTRAINT IF EXISTS Identity_ID_Provisioned;
ALTER TABLE IF EXISTS BLOCKCHAIN."IdentityUnprovision_BC"
    DROP CONSTRAINT IF EXISTS Identity_ID_Unprovisioned;
ALTER TABLE IF EXISTS MASTER."Order"
    DROP CONSTRAINT IF EXISTS Order_Maker_id;
ALTER TABLE IF EXISTS BLOCKCHAIN."Identity_BC"
    DROP COLUMN IF EXISTS "id";
ALTER TABLE IF EXISTS BLOCKCHAIN."Identity_BC"
    ADD COLUMN IF NOT EXISTS "classificationID" VARCHAR NOT NULL default '';
ALTER TABLE IF EXISTS BLOCKCHAIN."Identity_BC"
    ADD COLUMN IF NOT EXISTS "hashID" VARCHAR NOT NULL default '';
ALTER TABLE IF EXISTS BLOCKCHAIN."Identity_BC"
    ADD PRIMARY KEY ("classificationID", "hashID");

ALTER TABLE IF EXISTS BLOCKCHAIN."Maintainer_BC"
    DROP COLUMN IF EXISTS "id";
ALTER TABLE IF EXISTS BLOCKCHAIN."Maintainer_BC"
    ADD COLUMN IF NOT EXISTS "classificationID" VARCHAR NOT NULL default '';
ALTER TABLE IF EXISTS BLOCKCHAIN."Maintainer_BC"
    ADD COLUMN IF NOT EXISTS "identityID" VARCHAR NOT NULL default '';
ALTER TABLE IF EXISTS BLOCKCHAIN."Maintainer_BC"
    ADD PRIMARY KEY ("classificationID", "identityID");

ALTER TABLE IF EXISTS BLOCKCHAIN."Order_BC"
    DROP COLUMN IF EXISTS "id";
ALTER TABLE IF EXISTS BLOCKCHAIN."Order_BC"
    ADD COLUMN IF NOT EXISTS "classificationID" VARCHAR NOT NULL default '';
ALTER TABLE IF EXISTS BLOCKCHAIN."Order_BC"
    ADD COLUMN IF NOT EXISTS "makerOwnableID" VARCHAR NOT NULL default '';
ALTER TABLE IF EXISTS BLOCKCHAIN."Order_BC"
    ADD COLUMN IF NOT EXISTS "takerOwnableID" VARCHAR NOT NULL default '';
ALTER TABLE IF EXISTS BLOCKCHAIN."Order_BC"
    ADD COLUMN IF NOT EXISTS "rateID" VARCHAR NOT NULL default '';
ALTER TABLE IF EXISTS BLOCKCHAIN."Order_BC"
    ADD COLUMN IF NOT EXISTS "creationID" VARCHAR NOT NULL default '';
ALTER TABLE IF EXISTS BLOCKCHAIN."Order_BC"
    ADD COLUMN IF NOT EXISTS "makerID" VARCHAR NOT NULL default '';
ALTER TABLE IF EXISTS BLOCKCHAIN."Order_BC"
    ADD COLUMN IF NOT EXISTS "hashID" VARCHAR NOT NULL default '';
ALTER TABLE IF EXISTS BLOCKCHAIN."Order_BC"
    ADD PRIMARY KEY ("classificationID", "makerOwnableID", "takerOwnableID", "rateID", "creationID", "makerID",
                     "hashID");

CREATE TRIGGER TRANSACTION_COUNTER_LOG
    BEFORE INSERT OR UPDATE
    ON ANALYTICS."TransactionCounter"
    FOR EACH ROW
EXECUTE PROCEDURE PUBLIC.INSERT_OR_UPDATE_LOG();
CREATE TRIGGER MESSAGE_COUNTER_LOG
    BEFORE INSERT OR UPDATE
    ON ANALYTICS."MessageCounter"
    FOR EACH ROW
EXECUTE PROCEDURE PUBLIC.INSERT_OR_UPDATE_LOG();

CREATE TRIGGER FEE_GRANT_LOG
    BEFORE INSERT OR UPDATE
    ON BLOCKCHAIN."FeeGrant_BC"
    FOR EACH ROW
EXECUTE PROCEDURE PUBLIC.INSERT_OR_UPDATE_LOG();
CREATE TRIGGER AUTHORIZATION_BC_LOG
    BEFORE INSERT OR UPDATE
    ON BLOCKCHAIN."Authorization_BC"
    FOR EACH ROW
EXECUTE PROCEDURE PUBLIC.INSERT_OR_UPDATE_LOG();

# --- !Downs
DROP TRIGGER IF EXISTS TRANSACTION_COUNTER_LOG ON ANALYTICS."TransactionCounter" CASCADE;
DROP TRIGGER IF EXISTS MESSAGE_COUNTER_LOG ON ANALYTICS."MessageCounter" CASCADE;

DROP TRIGGER IF EXISTS AUTHORIZATION_BC_LOG ON BLOCKCHAIN."Authorization_BC" CASCADE;
DROP TRIGGER IF EXISTS FEE_GRANT_LOG ON BLOCKCHAIN."FeeGrant_BC" CASCADE;

DROP TABLE IF EXISTS ANALYTICS."TransactionCounter" CASCADE;
DROP TABLE IF EXISTS ANALYTICS."MessageCounter" CASCADE;

DROP TABLE IF EXISTS BLOCKCHAIN."Authorization_BC" CASCADE;
DROP TABLE IF EXISTS BLOCKCHAIN."FeeGrant_BC" CASCADE;
