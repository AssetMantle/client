# master-dispatcher {
#   type = Dispatcher
#   executor = "thread-pool-executor"
#   thread-pool-executor {
#     fixed-pool-size = 32
#   }
#   throughput = 1
# }

akka {
  actor {
    provider = cluster
  }

  remote {
    artery {
      enabled = on
      transport = aeron-udp
    }
  }
  remote.artery.canonical.hostname = ${clustering.ip}
  remote.artery.canonical.port = ${clustering.port}

  cluster {
    seed-nodes = [
       "akka://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}
    ]
  }
}

masterWithRouterApp {
  akka {
    actor.deployment {
      /master/clusterAwareRouter {
        router = round-robin-pool

        // make the router cluster-aware
        cluster {
          enabled = on
          max-nr-of-instances-per-node = 3
          allow-local-routees = on
          seed-nodes = [
             "akka://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}
          ]
        }
      }
    }

    remote.artery.canonical.hostname = ${clustering.ip}
    remote.artery.canonical.port = ${clustering.port}  }
}

masterWithGroupRouterApp {
  akka {
    actor.deployment {
      /routerActor/router {
        router = round-robin-group
        routees.paths = ["/user/blockchainActor"]

        // make the router cluster-aware
        cluster {
          enabled = on
          allow-local-routees = off
          seed-nodes = [
             "akka://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}
          ]
        }
      }
    }

    remote.artery.canonical.hostname = ${clustering.ip}
    remote.artery.canonical.port = ${clustering.port}
  }
}

clustering {
 ip = "127.0.0.1"
 ip = ${?CLUSTER_IP}
 port = 9000
 port = ${?CLUSTER_PORT}
 seed-ip = "127.0.0.1"
 seed-ip = ${?CLUSTER_IP}
 seed-ip = ${?SEED_PORT_9000_TCP_ADDR}
 seed-port = 9000
 seed-port = ${?SEED_PORT_9000_TCP_PORT}
 cluster.name = clustering-cluster
}